{{{{vue-js}}}}

<div id="app">
	<div class="sidebar">
		<div class="sidebar_entry" v-for="tab in tabs" v-bind:key="tab.id" v-bind:class="currentTab === tab.id ? activeTabClass : ''" v-on:click="switchToTab(tab.id)">
			<span class="im" v-bind:class="tab.iconClass"></span>
		</div>
	</div>

	<div class="tabs">
		<tab-players v-if="currentTab === 'players'" v-bind:players="players"></tab-players>
		<tab-vehicles v-if="currentTab === 'vehicles'" v-bind:vehicles="vehicles"></tab-vehicles>
		<tab-roles v-if="currentTab === 'roles'" v-bind:roles="roles"></tab-roles>
		<tab-rules v-if="currentTab === 'rules'" v-bind:rules="rules"></tab-rules>
		<tab-preferences v-if="currentTab === 'preferences'" v-bind:preferences="preferences"></tab-preferences>
		<tab-gamesettings v-if="currentTab === 'gamesettings'" v-bind:gamesettings="gamesettings"></tab-gamesettings>
		<tab-banned v-if="currentTab === 'banned'" v-bind:banned="banned"></tab-banned>
		<tab-logs v-if="currentTab === 'logs'" v-bind:logs="logs"></tab-logs>
	</div>

</div>

{{{{/vue-js}}}}

<p>test</p>

<script type="text/javascript">

	const store = Vuex.createStore({
		state: {
			userPeerId: 0,//TODO: get this thing from the login token
			tabs: [{
				id: 'players',
				name: 'Players',
				iconClass: 'im-users'
			},{
				id: 'vehicles',
				name: 'Vehicles',
				iconClass: 'im-car'
			},{
				id: 'roles',
				name: 'Roles',
				iconClass: 'im-crown'
			},{
				id: 'rules',
				name: 'rules',
				iconClass: 'im-task-o'
			},{
				id: 'preferences',
				name: 'Preferences',
				iconClass: 'im-control-panel'
			},{
				id: 'gamesettings',
				name: 'Game Settings',
				iconClass: 'im-wrench'
			},{
				id: 'banned',
				name: 'Banned Players',
				iconClass: 'im-flag'
			},{
				id: 'logs',
				name: 'Logs',
				iconClass: 'im-note-o'
			}],
			currentTab: 'rules',
			activeTabClass: 'active',

			players: {
				'x32' /* steam_id */ : {
					name: 'Pony',
					banned: false,
					roles: {
						Admin: true
					},
					peer_id: 1
				},
				'x64': {
					name: 'Carsa',
					banned: false,
					roles: {
						Owner: true
					}
				},
				'x99': {
					name: 'aBannedUser',
					banned: true,
					roles: {
						Owner: true
					}
				}
			},

			vehicles: {
				1 /* vehicle_id */: {
					owner: 'x32',//steam_id
					name: 'Bus',
					ui_id: 'ui_id'
				}
			},

			roles: {
				Owner: {
					commands: {
						ban: true,
						unban: true
					},
					admin: true,
					auth: true,
					members: [
						'x64'
					]
				},
				Admin: {
					commands: {
						unban: true
					},
					admin: true,
					auth: true,
					members: [
						'x32'
					]
				}
			},

			rules: [
				'dont be a dick',
				'help out'
			],

			preferences: {
				cheats: {
					value: false,
					type: 'bool'
				},
				maxMass : {
					value: 1000,
					type: 'number'
				},
				welcomeNew : {
					value: 'Welcome to this Stormworks server!',
					type: 'string'
				},
				startEquipment : {
					value: [
						{id: 15, slot: 'B', data1: 1},
						{id: 6, slot: 'C'},
						{id: 11, slot: 'E', data1: 3},
					],
					type: 'table'
				}
			},

			gameSettings: {
				npc_damage: true /* right now only supports booleans but will have numbers in the future */
			},

			banned: {
				"x99": "x64"
			},

			logs: [
				{
					time: new Date().getTime(),
					message: 'server started'
				},{
					time: new Date().getTime(),
					message: 'fondling ponies'
				},{
					time: new Date().getTime(),
					message: 'loading lasers'
				}
			]
		},
		computed: {
			userPeerId () {
				//TODO we need to calculate this with the help of the token the user uses to "login" to this page
			}
		},
		mutations: {
			setPlayers (state, players){
				state.players = players
			},
			switchTab (state, tab){
				state.currentTab = tab
			},
			addTab (state, tab){
				state.tabs.push(tab)
			}
		},
		actions: {
			setPlayers ({ commit }, players){
				commit('setPlayers', players)
			},
			switchTab ({commit}, tab){
				commit('switchTab', tab)
			},
			addTab ({ commit }, tab){
				commit('addTab', tab)
			}
		}

	})

	let app = Vue.createApp({
		computed: {
			tabs (){
				return store.state.tabs
			},
			currentTab (){
				return store.state.currentTab
			},
			activeTabClass (){
				return store.state.activeTabClass
			},

			players (){
				return store.state.players
			},
			vehicles (){
				return store.state.vehicles
			},
			roles (){
				return store.state.roles
			},
			rules (){
				return store.state.rules
			},
			preferences (){
				return store.state.preferences
			},
			gamesettings (){
				return store.state.gamesettings
			},
			banned (){
				return store.state.banned
			},
			logs (){
				return store.state.logs
			}
		},
		provide (){
			return {
				players: this.players,
				vehicles: this.vehicles,
				roles: this.rules,
				rules: this.rules,
				preferences: this.preferences,
				gamesettings: this.gamesettings,
				banned: this.banned,
				logs: this.logs
			}
		},
		methods: {
			switchToTab (tab){
				store.dispatch('switchTab', tab)
			}
		}
	})

	app.use(store)

	$(window).on('load', ()=>{
		// TODO empty the store and get freshly synced data
		let vm = app.mount('#app')
	})


	/* TODO
	function registerTab(id, name, iconClass){
		store.dispatch('addTab', {
			id: id,
			name: name,
			iconClass: iconClass
		})
	}*/

</script>


<script type="text/javascript" src="/static/scripts/components.js"></script>

<script type="text/javascript" src="/static/scripts/websock.js"></script>
<script type="text/javascript" src="/static/scripts/c2webclient.js"></script>
