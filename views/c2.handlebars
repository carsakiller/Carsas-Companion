{{{{vue-js}}}}

<div id="app">
	<pages v-bind:selectedindex="2">
		<page :title="'Players'" :icon="'users'">
			<players-management v-bind:players="players"></players-management>
		</page>
		<page :title="'Vehicles'" :icon="'car'">
			<vehicles-management v-bind:vehicles="vehicles"></vehicles-management>
		</page>
		<page :title="'Roles'" :icon="'crown'">
			<roles-management v-bind:roles="roles"></roles-management>
		</page>
		<page :title="'Rules'" :icon="'task-o'">
			<rules-management v-bind:rules="rules"></rules-management>
		</page>
		<page :title="'Preferences'" :icon="'control-panel'">
			<preferences-management v-bind:preferences="preferences"></preferences-management>
		</page>
		<page :title="'Game Settings'" :icon="'wrench'">
			<gamesettings-management v-bind:gamesettings="gamesettings"></gamesettings-management>
		</page>
		<page :title="'Logs'" :icon="'note-o'">
			<logs-management v-bind:logs="logs"></logs-management>
		</page>
	</pages>

</div>

{{{{/vue-js}}}}

<p>test</p>

<script type="text/javascript">

	const store = Vuex.createStore({
		state: {
			players: {
				'x32' /* steam_id */ : {
					name: 'Pony',
					roles: {
						Admin: true
					},
					peer_id: 1
				},
				'x64': {
					name: 'Carsa',
					roles: {
						Owner: true
					}
				},
				'x99': {
					name: 'aBannedUser',
					roles: {
						Owner: true
					}
				}
			},

			vehicles: {
				1 /* vehicle_id */: {
					owner: 'x32',//steam_id
					name: 'Bus',
					ui_id: 'ui_id'
				}
			},

			roles: {
				Owner: {
					commands: {
						ban: true,
						unban: true
					},
					admin: true,
					auth: true,
					members: [
						'x64'
					]
				},
				Admin: {
					commands: {
						unban: true
					},
					admin: true,
					auth: true,
					members: [
						'x32'
					]
				}
			},

			rules: [
				'dont be a dick',
				'help out'
			],

			preferences: {
				cheats: {
					value: false,
					type: 'bool'
				},
				maxMass : {
					value: 1000,
					type: 'number'
				},
				welcomeNew : {
					value: 'Welcome to this Stormworks server!',
					type: 'string'
				},
				startEquipment : {
					value: [
						{id: 15, slot: 'B', data1: 1},
						{id: 6, slot: 'C'},
						{id: 11, slot: 'E', data1: 3},
					],
					type: 'table'
				}
			},

			gameSettings: {
				npc_damage: true /* right now only supports booleans but will have numbers in the future */
			},

			banned: {
				"x99": "x64"
			},

			logs: [
				{
					time: new Date().getTime(),
					message: 'server started'
				},{
					time: new Date().getTime(),
					message: 'fondling ponies'
				},{
					time: new Date().getTime(),
					message: 'loading lasers'
				}
			],

			allCommands: {
				ban: {

				},
				unban : {

				},
				orderFood: {

				}
			}
		},
		mutations: {
			setPlayers (state, players){
				state.players = players
			},
			test (state){
				state.roles.Owner.auth = false
			}
			/*,
			addTab (state, tab){
				state.tabs.push(tab)
			}*/
		},
		actions: {
			setPlayers ({ commit }, players){
				commit('setPlayers', players)
			},
			test ({commit}){
				commit('test')
			}
			/*,
			switchTab ({commit}, tab){
				commit('switchTab', tab)
			},
			addTab ({ commit }, tab){
				commit('addTab', tab)
			}*/
		}

	})

	let app = Vue.createApp({//TODO: what the fuck am i doing here? We probably should move this into the components, so they use provide/inject, or directly access the vuex store (that's why we have it don't we?)
		computed: {
			myPeerId () {
				//TODO we need to calculate this with the help of the token the user uses to "login" to this page
				return 1
			},

			tabs (){
				return store.state.tabs
			},
			currentTab (){
				return store.state.currentTab
			},
			activeTabClass (){
				return store.state.activeTabClass
			},

			players (){
				return store.state.players
			},
			vehicles (){
				return store.state.vehicles
			},
			roles (){
				return store.state.roles
			},
			rules (){
				return store.state.rules
			},
			preferences (){
				return store.state.preferences
			},
			gamesettings (){
				return store.state.gamesettings
			},
			banned (){
				return store.state.banned
			},
			logs (){
				return store.state.logs
			}
		},
		provide (){
			return {
				myPeerId: this.myPeerId,

				players: this.players,
				vehicles: this.vehicles,
				roles: this.rules,
				rules: this.rules,
				preferences: this.preferences,
				gamesettings: this.gamesettings,
				banned: this.banned,
				logs: this.logs,

				allCommands: this.allCommands
			}
		}
		/*,
		methods: {
			switchToTab (tab){
				store.dispatch('switchTab', tab)
			}
		}*/
	})

	app.use(store)

	$(window).on('load', ()=>{
		// TODO empty the store and get freshly synced data
		let vm = app.mount('#app')
	})


	/* TODO
	function registerTab(id, name, iconClass){
		store.dispatch('addTab', {
			id: id,
			name: name,
			iconClass: iconClass
		})
	}*/

</script>


<script type="text/javascript" src="/static/scripts/components.js"></script>

<script type="text/javascript" src="/static/scripts/websock.js"></script>
<script type="text/javascript" src="/static/scripts/c2webclient.js"></script>
